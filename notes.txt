_
####################################################################################################
# Strings

# incrementing and decrementing values (strings and floats)
set inventory:4x100m-womens-final 1000
get inventory:4x100m-womens-final
# decrement
decrby inventory:4x100m-womens-final 1
get inventory:4x100m-womens-final
type inventory:4x100m-womens-final
object encoding inventory:4x100m-womens-final

# set to non-int string, polymorphism: differents types of data for the same key
set inventory:4x100m-womens-final "Sold Out"
# data type may change, no schema
object encoding inventory:4x100m-womens-final
# now this will fail because the encoding is not int but text: (error) ERR value is not an integer or out of range
decrby inventory:4x100m-womens-final 1

# set the key to 0
set inventory:4x100m-womens-final 0

# short increment by 1
incr inventory:4x100m-womens-final

# short decrement by 1
decr inventory:4x100m-womens-final


####################################################################################################
# Hashes: a way to store and retrieve an object, mini key-value store within the key

# set one or more fields in hash
hset event:judo capacity 12000 location "Nippon Budokan" ticket_price:gold 100 availability:gold 8000
# check for existence of a field with hexist
hexists event:judo capacity
# get field value, nil if does not exist
hget event:judo capacity
hget event:judo ticket_price:gold
hget event:judo timezone

# increment the number of tickets by the number of tickets sold. read value back
hincrby event:judo availability:gold -10
hget event:judo availability:gold

# return values for all of the fields <= don't use in prod
hgetall event:judo

# get all keys or all values <= don't use in prod
hkeys event:judo
hvals event:judo

# hscan <= use this in prod instead
# start at cursor 0 and use a matching pattern availability:*

# set a timezone field then remove it with hdel
hset event:judo timezone JST
hget event:judo timezone
hdel event:judo timezone

# session objects can be saved as a string, but you could use a hash
- hmset session:a3fWa ts 1518132669 host www.example.org
- hincrby session:a3fWa requests 1
- expire session:a4fWa 60


####################################################################################################
# Lists: ordered collection of elements (strings)
- duplicates are allowed
- elements can be added or remove at either end (left, right) or relative to another element
- simple way to implement stacks, queues, or other data structures
- a structure can only be comprised of strings, no nesting
- implemented as double-linked array (constant time insertion left or right / head or tail)

# add to left or right of the list
lpush
rpush

# remove from left or right
lpop
rpop 

# add 3 orders to 4x100m-womens-final (create list if non-existent)
lpush orders:4x100m-womens-final jane:4 bill:5 charlie:6
# find length, 3 in this case
llen orders:4x100m-womens-final
# retrieve elements, two parameters: start and stop indexes, the whole list this time
# indexes start at zero, but the list displayed with start at 1
lrange orders:4x100m-womens-final 0 -1

# lpush + rpush <= implement a stack
# rpush + lpop  <= implement a queue

rpush waitlist:basketball-mens-qual brian:2 kate:7 kevin:9
lrange waitlist:basketball-mens-qual 0 -1

# remove rightmost element
rpop rpop orders:4x100m-womens-final
# remove leftmost element
lpop waitlist:basketball-mens-qual

# List use cases
- activity stream: most recent activity (e.g. facebook posts)
  # add items to the left of the list
	lpush stream one two three four five
  # get latest 3 items
  lrange stream 0 2
  # prune the list, retain 4 elements: five four three two
  ltrim stream 0 3
- inter-process communication
  # queue that supports producer-consumer pattern
  # produce
  rpush queue "event1"
  # keep order: get the events in the same order they produced
  # pop from the opposite side you pushed
  lpop queue


# Quiz

# execute:
rpush list-two a b c d
# a b c d
lpop list-two
# pops 'a', remain: b c d

# question: output?
lindex list-two 1
# get element at 2nd position (index 1) => c
 

# execute:
set list-four abc
rpush list-four a b c d


# question: What does list-four now contain?
# an error occurs. 'set' does not create a list, it creates a string so the 'rpush' fails


####################################################################################################
# Data Structures 1: Recap

Basic Redis Data Structures:
- Keys & Expiration
- Strings
- Hashes
- Lists

####################################################################################################
# Sets: unordered collection of strings
- store and manipulate strings
- set operations: differences, intersection, unions
- elements: just strings. no hierarchy, compound structures, etc


# add 3 elements to set
sadd venues "Olympic Stadium" "Nippon Budokan" "Tokyo Stadium"
sscan venues 0 match *
# try to add existing element again => return value of 0
sadd venues "Olympic Stadium"

# check if element exists
# exists => return value of 1
sismember venues "Nippon Budokan"
# does not exist => return value of 0
sismember venues "Eiffel Tower"

# remove elements
# by value
sadd values "Eiffel Tower"
srem venues "Eiffel Tower"
# remove random element
# remove 2 rndom elements
spop venues 2

# difference between sets









sdiff

# create two new sets
sadd "venue-subway:Makuhari Messe" line1 line2 line3 line4
sadd "venue-subway:Tokyo Tatrum" line2 line4 line7

# common values between sets (sinter => sets intersection)
# returns numbered list: line2 line4
sinter "venue-subway:Makuhari Messe" "venue-subway:Tokyo Tatrum"

# other commands
sdiff
sunion

# Use cases for sets:
- tag cloud
  # maintain separate list of tags for each object we want to tag
  sadd wrench tool meta
  # all tags belonging to object
  sscan
  # tags accross objects
  sinter
  # set of all tags
  sunion
- create record of unique visitors of each page on our website for a given period of time
  # create set for each unique URL and time period, e.g.: about.html and 10th of February 2018
  # ech visitors cookie can be recorded as a member of the set
  # the set now contains all the unique visitors to that page within the time period, which can be retrieved with the sscan command
  # since the expiration relates to the key are not the elements in the set, then all elements are removed when the key is expired


####################################################################################################
# sorted sets
- collection of unique strings
- score associated with each element, floating point number that provides a sorting order for the elements. ties => alphabetic
- manipulate by value, position, score or lexigraphically
- set command sorted sets: union, intersection


# add element to sorted set: zadd
- zadd nx / xx => add if valuea does not exists / update an existing element

# add element with score value of 1
zadd "subway:K" 1 Tokyo 
zadd "subway:K" 5 Shin 2 Etchu 2 Hatchb

# get elements in ranked order
zrange











####################################################################################################
####################################################################################################

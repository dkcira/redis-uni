####################################################################################################
# WEEK 1
####################################################################################################

####################################################################################################
# Strings

# incrementing and decrementing values (strings and floats)
set inventory:4x100m-womens-final 1000
get inventory:4x100m-womens-final
# decrement
decrby inventory:4x100m-womens-final 1
get inventory:4x100m-womens-final
type inventory:4x100m-womens-final
object encoding inventory:4x100m-womens-final

# set to non-int string, polymorphism: differents types of data for the same key
set inventory:4x100m-womens-final "Sold Out"
# data type may change, no schema
object encoding inventory:4x100m-womens-final
# now this will fail because the encoding is not int but text: (error) ERR value is not an integer or out of range
decrby inventory:4x100m-womens-final 1

# set the key to 0
set inventory:4x100m-womens-final 0

# short increment by 1
incr inventory:4x100m-womens-final

# short decrement by 1
decr inventory:4x100m-womens-final


####################################################################################################
# Hashes: a way to store and retrieve an object, mini key-value store within the key

# set one or more fields in hash
hset event:judo capacity 12000 location "Nippon Budokan" ticket_price:gold 100 availability:gold 8000
# check for existence of a field with hexist
hexists event:judo capacity
# get field value, nil if does not exist
hget event:judo capacity
hget event:judo ticket_price:gold
hget event:judo timezone

# increment the number of tickets by the number of tickets sold. read value back
hincrby event:judo availability:gold -10
hget event:judo availability:gold

# return values for all of the fields <= don't use in prod
hgetall event:judo


# get all keys or all values <= don't use in prod
hkeys event:judo
hvals event:judo

# hscan <= use this in prod instead
# start at cursor 0 and use a matching pattern availability:*

# set a timezone field then remove it with hdel
hset event:judo timezone JST
hget event:judo timezone
hdel event:judo timezone

# session objects can be saved as a string, but you could use a hash
- hmset session:a3fWa ts 1518132669 host www.example.org
- hincrby session:a3fWa requests 1
- expire session:a4fWa 60


####################################################################################################
# Lists: ordered collection of elements (strings)
- duplicates are allowed
- elements can be added or remove at either end (left, right) or relative to another element
- simple way to implement stacks, queues, or other data structures
- a structure can only be comprised of strings, no nesting
- implemented as double-linked array (constant time insertion left or right / head or tail)

# add to left or right of the list
lpush
rpush

# remove from left or right
lpop
rpop 

# add 3 orders to 4x100m-womens-final (create list if non-existent)
lpush orders:4x100m-womens-final jane:4 bill:5 charlie:6
# find length, 3 in this case
llen orders:4x100m-womens-final
# retrieve elements, two parameters: start and stop indexes, the whole list this time
# indexes start at zero, but the list displayed with start at 1
lrange orders:4x100m-womens-final 0 -1

# lpush + rpush <= implement a stack
# rpush + lpop  <= implement a queue

rpush waitlist:basketball-mens-qual brian:2 kate:7 kevin:9
lrange waitlist:basketball-mens-qual 0 -1

# remove rightmost element
rpop rpop orders:4x100m-womens-final
# remove leftmost element
lpop waitlist:basketball-mens-qual

# List use cases
- activity stream: most recent activity (e.g. facebook posts)
  # add items to the left of the list
	lpush stream one two three four five
  # get latest 3 items
  lrange stream 0 2
  # prune the list, retain 4 elements: five four three two
  ltrim stream 0 3
- inter-process communication
  # queue that supports producer-consumer pattern
  # produce
  rpush queue "event1"
  # keep order: get the events in the same order they produced
  # pop from the opposite side you pushed
  lpop queue


# Quiz

# execute:
rpush list-two a b c d
# a b c d
lpop list-two
# pops 'a', remain: b c d

# question: output?
lindex list-two 1
# get element at 2nd position (index 1) => c
 

# execute:
set list-four abc
rpush list-four a b c d


# question: What does list-four now contain?
# an error occurs. 'set' does not create a list, it creates a string so the 'rpush' fails


####################################################################################################
# Data Structures 1: Recap

Basic Redis Data Structures:
- Keys & Expiration
- Strings
- Hashes
- Lists


####################################################################################################
# Sets: unordered collection of strings
- store and manipulate strings
- set operations: differences, intersection, unions
- elements: just strings. no hierarchy, compound structures, etc


# add 3 elements to set
sadd venues "Olympic Stadium" "Nippon Budokan" "Tokyo Stadium"
sscan venues 0 match *
# try to add existing element again => return value of 0
sadd venues "Olympic Stadium"

# check if element exists
# exists => return value of 1
sismember venues "Nippon Budokan"
# does not exist => return value of 0
sismember venues "Eiffel Tower"

# remove elements
# by value
sadd values "Eiffel Tower"
srem venues "Eiffel Tower"
# remove random element
# remove 2 rndom elements
spop venues 2

# difference between sets
sdiff

# create two new sets
sadd "venue-subway:Makuhari Messe" line1 line2 line3 line4
sadd "venue-subway:Tokyo Tatrum" line2 line4 line7

# common values between sets (sinter => sets intersection)
# returns numbered list: line2 line4
sinter "venue-subway:Makuhari Messe" "venue-subway:Tokyo Tatrum"

# other commands
sdiff
sunion

# Use cases for sets:
- tag cloud
  # maintain separate list of tags for each object we want to tag
  sadd wrench tool meta
  # all tags belonging to object
  sscan
  # tags accross objects
  sinter
  # set of all tags
  sunion
- create record of unique visitors of each page on our website for a given period of time
  # create set for each unique URL and time period, e.g.: about.html and 10th of February 2018
  # ech visitors cookie can be recorded as a member of the set
  # the set now contains all the unique visitors to that page within the time period, which can be retrieved with the sscan command
  # since the expiration relates to the key are not the elements in the set, then all elements are removed when the key is expired


####################################################################################################
# sorted sets
- collection of unique strings
- score associated with each element, floating point number that provides a sorting order for the elements. ties => alphabetic
- manipulate by value, position, score or lexigraphically
- set command sorted sets: union, intersection


# add element to sorted set: zadd
- zadd nx / xx => add if value does not exists / update an existing element

# add element with score value of 1
zadd "subway:K" 1 Tokyo 
# add 3 elements with score  5 2 2
zadd "subway:K" 5 Shin 2 Etchu 2 Hatchb

# get elements in ranked order
zrange subway:K 0 -1
# retrieve showing scores
zrange subway:K 0 -1 withscores

# add element with same score
zadd "subway:K" 10 Nishi-Funabashi
zadd "subway:K" 10 Futamatashimmachi


# for elements with same score, sorting uses lexicological ordering
zrange subway:K 0 -1


# find associated score of element
zscore "subway:K" Tokyo

# find ranking of element (0 for first ranked, 1 for second ranked, and so on)
zrank "subway:K" Tokyo


# count number of members between scores (inclusive)
zcount "subway:K" 2 5

# find stations between the 2nd and 5th stop
zrangebyscore "subway:K" 2 5

# remove elemnt(s) by valus
zrem "subway:K" Shin

# Quiz

# execute:
zadd q-1 10 a 20 b 30 c 40 d
# question: What is the Rank of of "b" element?
# answer: 1 (ZRANK q-1 b)

# question: Can members be added to a Sorted Set with the same score?
# answer: yes (disambiguation happens using lexicological ordering)

# question: Can elements of a Sorted Set have the same Rank?
# answer: no

# question: Can you have two elements in a Sorted Set with the same value but different rank?
# answer: no, the values need to be unique


# set-based operations for sorted sets but results can only be stored in another sorted set
# one can perform intersection and union, but not a difference

# Sorted sets use cases
- Leaderboards for online games:
  # element value: user id or screen name
  # 6 players entries with respective point totals
  ZADD leaderboard 90 jane 010 john 75 bob 67 kevin 88 mel 22 kate
  # use the point total as the natural score for ordering
  # jane gets 50 point bonus
  ZINCRBY leaderboard 50 jane
  # get top 3 scores
  ZREVRANGE leaderboard 0 2 withscores
  # reduce (cap) the size of the list to top 3
  ZREMRANGEBYRANK leaderboard 0 -4
- Priority queue
  # elements can be added in any order, but they will be ordered by score
  ZADD priorityqueue 1 p1-item1 2 p2-item1 3 p3-item1 1 p1-item2
  # get next item to process in priority order
  ZRANGE priorityqueue 0 0
  # remove item from the list
  ZREM priorityqueue p1-item1
  # these statements can be combined in a transaction to make safe operations
  

# Quiz

# question: What set operators do Sorted Sets support?
# answer: intersection, union (but not difference)



####################################################################################################
# Homework 1

Can you define an Expiration time of a field in a Hash?
No: it is not possible, either use a different top-level key for that specific field, or store along with the filed another field with an expire time, fetch both, and let the application understand if it is still valid or not based on current time.


What command is used to set a value in a Hash, only if the field does not already exist?
HSETNX : Sets field in the hash stored at key to value, only if field does not yet exist. If key does not exist, a new key holding a hash is created. If field already exists, this operation has no effect.

What criteria does Redis use to determine if an operation can be performed against a key?
Datatype, Encoding of Value


If the following commands are executed:
set hw1-4 123
incr hw1-4
append hw1-4 "abc"
What does the GETRANGE command return?
getrange hw1-4 1 2

Answer:
"24"


# get a hash
hget event:UOYW-ZJAB-SZZQ-RLUJ name


The Sorted Set invoice_totals in the sample data, contains the order total as the score and the order id as the value, for each sale made.
What is the order total, for the order with the highest order value?

zrange invoice_totals 0 -1
zrange invoice_totals 0 -1 withscores
# ordered by order value => the last element has the highest order


If the following commands are executed:
sadd hw1-7 "hello"
spop hw1-7
exists hw1-7

answer: 0

can use 'sscan hw1-7 0 match *' at each step to check the set



If a Sorted Set is created as follows:
zadd hw1-8 1 a 2 b 3 c 4 d 5 e 6 f
What command would return members with a score greater than 3, regardless of the current members of the Sorted Set?

answer: zrangebyscore hw1-8 (3 +inf


can use the following to show the ordered set
zrange hw1-8 0 -1 withscores





####################################################################################################
## WEEK 2
####################################################################################################


####################################################################################################
# Capped Collections

# cardinality of collection
# lists:
LLEN key
# sets:
SCARD key
# sorted sets
ZCARD key

# Capped collections: retain only a subset of members
# examples:
- leaderboard game: retain only top 3 for retain purposes
- recent posts in activity stream

# for a list
# trim what to retain by choosing index, the rest is dropped
LTRIM key start stop

# example with list:
# list with six elements
rpush list-one a b c d e f

# show cardinality
llen list-one
# print all elements
	lrange list-one 0 -1

# keep indices 0 to 4 (a to e, drop f) => a b c d e
ltrim list-one 0 4

# start index 0, stop index -2 (keep a b c d)
ltrim list-one 0 -2

# cardinality of list-one (4 elements remain)
llen list-one

# push z on the left (z a b c d)
lpush list-one z

# bring cardinality down to 4 again (z a b c)
ltrim list-one 0 3

# pattern: add element with rpush/lpush, cap the collection with ltrim


# for sorted lists, the ltrim equivalent is
ZREMRANGEBYRANK key start stop
# but instead of retaining, removes elements between start and stop


# pattern: add element with zadd, cap the collection with zremrangebyrank

# sorted set of  6 elements with scores
zadd sortedset-two 1 a 2 b 3 c 4 d 5 e 6 f

# print out the sorted set with scores
zrange sortedset-two 0 -1 withscores

# remove elements from the 5th to the highest scoring element, remove 'f'
zremrangebyrank sortedset-two 5 -1

# remove last element, start at index 4 since array is shorter now
zremrangebyrank sortedset-two 4 -1


# add an element with high sore
zadd sortedset-two 26 z

# trim the lowest scoring element
zremrangebyrank sortedset-two  0 0



# set operations with sets and sorted sets

# two sorted sets, one for each event
zadd sales:judo 1500 june 2000 bill 200 mary
zadd sales:wrestling 1800 bill 1000 bob 800 mary
# find intersection
zinterstore promo:taekwondo 2 sales:wrestling sales:judo aggregate sum

# sorted set commands work on unsorted sets too

# create (unsorted) wait list for taekwondo => no scores
sadd waitlist:taekwondo emma bill mary
# create an intersection of the unsorted set with the two sorted ones
# no scores => add the weights, 3d weight (1000) is use as score for that
# Note: in this example we are using the max aggregation, not sum!
zinterstore promo:taekwondo 3 sales:wrestling sales:judo waitlist:taekwondo weights 1.2 0.8 1000 aggregate max

# show all value
sscan waitlist:taekwondo 0 match *

# find unique number accross a number of sets
sadd venues:Athletics "IP Garden" "Olympic"
sadd venues:Judo "Tokyo Stadium"
sadd venues:Football "Nippon Budokan" "Sapporo Dome"
#
sunion venues:Football venues:Judo venues:Athletics

# sorted sets: zunionscore
zadd events:capacity 60102 "Closing Ceremony" 1000 "Table  Tennis" 6000 "Skateboarding"
zadd events:sales -200 "Table Tennis" -5900 "Skateboarding"
# find availability by combining the two sorted sets
# no weights, so defaults 1 are used
zunionstore events:availability 2 events:capacity events:sales aggregate sum













####################################################################################################
####################################################################################################
